// Сохранение, редактирование, чтение, удаление индификаторов расчетов
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
//***************************************************************
namespace Logos_TVD
{
    /// <summary>
    /// Работа с историей расчетов
    /// </summary>
    internal class TSolvingHistory
    {
        /// <summary>
        /// Путь, по которому будет записан журнал истории
        /// </summary>
        private string Path { get; } = System.IO.Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\" + "SolvingHistory";
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Очистить историю
        /// </summary>
        public void ClearHistory()
        {
            if (File.Exists(Path))
                File.Delete(Path);
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Получить запись из истории, расположенную на LineId
        /// </summary>
        /// <param name="LineId">Индекс строки, которую вернет данный метод</param>
        /// <returns>Строка с "UID;JobID"</returns>
        public string GetHistoryLine(int LineId)
        {
            string[] file = null;
            if (File.Exists(Path))
                file = File.ReadAllLines(Path);
            return file[LineId];
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        public string GetJobID_ByUID(string UID)
        {
            var History = GetHistory();
            foreach (var line in History)
            {
                if (line.Contains(UID))
                {
                    return line.Split(';')[1];
                }
            }
            return null;
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Возвращает всю историю в виде массива строк
        /// </summary>
        /// <returns>Массив строк "UID;JobID"</returns>
        public string[] GetHistory()
        {
            string[] file = null;
            if (File.Exists(Path))
                file = File.ReadAllLines(Path);
            return file;
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Сохранение новой и изменение старой записи
        /// </summary>
        /// <param name="UID"></param>
        /// <param name="JobId"></param>
        public void SaveIds(string UID, string JobId)
        {
            string[] file = null;
            // Читаем файл истории, если он существует
            if (File.Exists(Path))
                file = File.ReadAllLines(Path);
            // Иначе создаем файл истории и записываем
            else
            {
                File.WriteAllText(Path, UID + ";" + JobId + "\n");
                return;
            }
            // Проверка на наличие такого же UID уже записанного в истории
            var LineId = CheckForSameUID(file, UID);
            // Если записан в истории, то перезаписываем файл обновляя JobId данного UID
            if (LineId != -1)
            {
                // Обновление строки
                file[LineId] = UID + ";" + JobId;
                File.WriteAllLines(Path, file);
            }
            // Если не записан в истории, то приписываем в конце файла
            else File.AppendAllText(Path, UID + ";" + JobId + "\n");
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Проверки наличия записи в истории с таким же UID
        /// </summary>
        /// <param name="file">Прочтенный файл истории</param>
        /// <param name="UID"></param>
        /// <returns>Индекс строки в которой записан такой же UID. Возвращает -1, если такого UID нет в истории</returns>
        private int CheckForSameUID(string[] file, string UID)
        {
            // Перебор всех строк истории с целью найти строку с таким же UID
            for (int i = 0; i < file.Length; i++)
            {
                if (file[i].Contains(UID))
                    return i;
            }
            // Нет в истории
            return -1;
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Возврат последней записи из истории
        /// </summary>
        /// <returns></returns>
        public string GetMostRecentUID()
        {
            string[] file = null;
            // Читаем файл истории, если он существует
            if (File.Exists(Path))
                file = File.ReadAllLines(Path);
            //Если истории нет, то ошибка
            else return "error";

            return file[file.Length - 1];
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Удаление строки по номеру строки (айди)
        /// </summary>
        /// <param name="LineId">Номер строки</param>
        public void DeleteLines(int LineId)
        {
            string[] file = null;
            // Читаем файл истории, если он существует
            if (File.Exists(Path))
                file = File.ReadAllLines(Path);
            List<string> NewFile = file.ToList();
            //Если айди задан больше, чем имеется записей, то документ не изменяется
            if (LineId+1 < NewFile.Count)
            {
                NewFile.RemoveAt(LineId - 1);
            }
            file = NewFile.ToArray();
            File.WriteAllLines(Path, file);
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Удаление строки по UID
        /// </summary>
        /// <param name="UID"></param>
        public void DeleteLines(string UID)
        {
            string[] file = null;
            // Читаем файл истории, если он существует
            if (File.Exists(Path))
                file = File.ReadAllLines(Path);
            var LineId = CheckForSameUID(file, UID);
            // Если такого UID нет, то история не изменяется
            if (LineId != -1)
                DeleteLines(LineId + 1);
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Удаление нескольких строк по номеру (айди)
        /// </summary>
        /// <param name="LineIds">Массив из номера строк</param>
        public void DeleteLines(int[] LineIds)
        {
            string[] file = null;
            // Читаем файл истории, если он существует
            if (File.Exists(Path))
                file = File.ReadAllLines(Path);
            // Заменяем строки, которые нужно удалить на null 
            for (int i = 0; i < LineIds.Length; i++)
            {
                if (LineIds[i] + 1 < file.Length)
                    file[LineIds[i] - 1] = null;
            }
            List<string> NewFile = file.ToList();
            // Удаление нулевых строк
            for (int i = NewFile.Count - 1; i > -1; i--)
            {
                if (NewFile[i]==null)
                {
                    NewFile.RemoveAt(i);
                    i++;
                }
            }
            file = NewFile.ToArray();
            File.WriteAllLines(Path, file);
        }
        //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    }
}
